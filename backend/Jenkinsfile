pipeline {
  agent any

  environment {
    SERVICE_NAME   = "spring-app"                      // compose 서비스명
    CONTAINER_NAME = "backend-app"                     // 컨테이너명
    COMPOSE_FILE   = "${WORKSPACE}/backend/docker-compose.yml"
    COMPOSE_CMD    = "docker compose -f ${WORKSPACE}/backend/docker-compose.yml"
  }

  stages {
    stage('Checkout') {
      steps { checkout scm }
    }

    stage('Sanity: docker reachable') {
      steps {
        sh '''
          docker ps
          docker compose version
          test -f "$COMPOSE_FILE" && echo "[OK] compose file found: $COMPOSE_FILE" || (echo "[ERR] compose file missing"; exit 14)
        '''
      }
    }

    stage('Ensure MySQL is Running') {
      steps {
        sh '''
          if ! docker ps --format '{{.Names}}' | grep -q '^mysql-prod$'; then
            echo "[INFO] Starting MySQL via compose..."
            $COMPOSE_CMD up -d mysql

            echo "[INFO] Waiting for MySQL to be healthy..."
            for i in {1..18}; do
              if [ "$(docker inspect -f '{{.State.Health.Status}}' mysql-prod 2>/dev/null)" = "healthy" ]; then
                echo "[INFO] MySQL is healthy."
                break
              fi
              sleep 5
            done
          else
            echo "[INFO] MySQL is already running."
          fi
        '''
      }
    }

    stage('Stop Backend Only') {
      steps {
        sh '''
          docker stop $CONTAINER_NAME || true
          docker rm   $CONTAINER_NAME || true
        '''
      }
    }

    stage('Build & Deploy Backend') {
      steps {
        sh '''
          $COMPOSE_CMD up -d --build $SERVICE_NAME
          $COMPOSE_CMD ps
        '''
      }
    }

    stage('Health Check') {
      steps {
        script {
          timeout(time: 3, unit: 'MINUTES') {
            waitUntil {
              script {
                def rc = sh(
                  script: '''
                    set -e
                    HOST_IP=$(ip -4 route show default | awk '{print $3}')
                    echo "[INFO] Checking health at http://$HOST_IP:8080/actuator/health"
                    curl -fsS http://$HOST_IP:8080/actuator/health | grep -q UP
                  ''',
                  returnStatus: true
                )
                return rc == 0
              }
            }
          }
        }
      }
    }

    stage('DB Schema Update') {
      steps {
        sh '''
          echo "[INFO] DB schema migration handled by app (JPA/Flyway)."
        '''
      }
    }
  }

  post {
    success {
      echo 'Backend deployment successful! Database preserved.'
      sh '''
        $COMPOSE_CMD logs --tail=100 $SERVICE_NAME || true
      '''
    }
    failure {
      echo 'Backend deployment failed!'
      sh '''
        $COMPOSE_CMD logs $SERVICE_NAME || true
        docker logs --tail=200 $CONTAINER_NAME || true
      '''
    }
  }
}
