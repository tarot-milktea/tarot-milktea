/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Spring Boot dependencies
    implementation libs.spring.boot.starter.web
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    testImplementation libs.spring.boot.starter.test

    // Swagger/OpenAPI documentation
    implementation libs.springdoc.openapi.starter.webmvc.ui

    // HTTP 클라이언트 (OpenAI API 호출용)
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    
    // 재시도 및 회로차단기
    implementation 'org.springframework.retry:spring-retry'
    implementation 'org.springframework:spring-aspects'
    
    // 설정 프로퍼티 바인딩 (@ConfigurationProperties 지원)
    implementation 'org.springframework.boot:spring-boot-configuration-processor'
    annotationProcessor 'org.springframework.boot:spring-boot-configuration-processor'
    
    // JSON 처리 향상
    implementation 'com.fasterxml.jackson.core:jackson-databind'
    implementation 'com.fasterxml.jackson.core:jackson-core'
    implementation 'com.fasterxml.jackson.core:jackson-annotations'
    
    // 로깅 향상 (구조화된 로그)
    implementation 'net.logstash.logback:logstash-logback-encoder:7.4'
    
    // 캐싱 (선택사항 - 나중에 AI 응답 캐싱용)
    implementation 'org.springframework.boot:spring-boot-starter-cache'
    
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    // This dependency is used by the application.
    implementation libs.guava
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

tasks.withType(JavaCompile) {
    options.compilerArgs += ['-Xlint:deprecation']
}

application {
    // Define the main class for the application.
    mainClass = 'org.com.taro.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}
